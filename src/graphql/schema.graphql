scalar Upload

type User {
    id: ID!
    username: String!
    email: String!
    password: String!
    avatar_url: String
    created_at: String!
    updated_at: String!
}

type AuthPayload {
    token: String!
    user: User!
}

type FeaturedProfile {
    id: ID!
    user: User!
}

type RegistrationFeaturedProfile {
    featured_profile: FeaturedProfile!
    registration_featured_profile_state: String!
}

type ProductFeaturedProfile {
    featured_profile: FeaturedProfile!
    product_featured_profile_state: String!
    product_featured_profile_timestamp: String!
}

type Category {
    id: ID!
    name: String!
    sorting: Int!
    created_at: String!
    updated_at: String!
}

type AppInformation {
    id: ID!
    name: String!
    version: String!
    created_at: String!
    updated_at: String!
}

type Query {
    getAllUsers: [User]
    getUser(id: Int): User
    getRegistrationFeaturedProfile(id: Int): RegistrationFeaturedProfile
    getProductFeaturedProfile(id: Int): ProductFeaturedProfile
    getAllProductFeaturedProfiles: [ProductFeaturedProfile]
    getAllRegistrationFeaturedProfiles: [RegistrationFeaturedProfile]
    getAllCategories: [Category]
}

type Mutation {
    createUser(username: String!, email: String!, password: String!): User
    updateUser(id: Int!, username: String, email: String, password: String): User
    deleteUser(id: Int!): User
    createRegistrationFeaturedProfile(user_id: Int!): RegistrationFeaturedProfile
    createProductFeaturedProfile(user_id: Int!): ProductFeaturedProfile
    login(email: String!, password: String!): AuthPayload
    uploadUserAvatar(user_id: Int!, avatar: Upload!): User
}

schema {
    query: Query
    mutation: Mutation
}